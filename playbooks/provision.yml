- name: cloud-native-workshop-apb playbook to provision the application
  hosts: localhost
  gather_facts: false
  connection: local
  vars:
    openshift_user: 
    openshift_password: 
    openshift_token:
    openshift_master_url: 
    openshift_user_password:
    project_suffix: "X"
    git_repository_lab_path: mcouliba/cloud-native-labs
    git_repository_lab_reference: ocp-3.11
    git_repository_guide_path: mcouliba/cloud-native-guides
    git_repository_guide_reference: ocp-3.11
    gogs_dev_user: developer
    gogs_pwd: openshift
    infrasvcs_adm_user: adminuser
    infrasvcs_adm_pwd: adminpwd
    openshift_service_mesh_installation: false
    local_kiali_installation: false
    initialize_project_permissions: false

  roles:
  - role: ansible.kubernetes-modules
    install_python_requirements: no
  - role: ansibleplaybookbundle.asb-modules

  tasks:    
  - name: login as super user with token
    shell: "oc login --token={{ openshift_token }} --insecure-skip-tls-verify=true"
    when:
      - openshift_token is defined
      - openshift_token is not none
      - openshift_token|trim() != ""
    tags: always

  - name: login as super user with pwd
    shell: "oc login -u {{ openshift_user }} -p {{ openshift_password }} --insecure-skip-tls-verify=true"
    when: >
      openshift_token is not defined or
      openshift_token is none or
      openshift_token|trim() == ""
    tags: always  
          
  - name: extract app route suffix
    block:
      - openshift_v1_route:
          name: dummy
          namespace: "{{ namespace }}"
          state: present
          spec_to_kind: Service
          spec_to_name: dummy
          spec_port_target_port: 8080
        register: dummy_route
      - set_fact:
          apps_hostname_suffix: "{{ dummy_route.route.spec.host|regex_replace('^dummy-' + namespace + '\\.(.*)$', '\\1') }}"
      - openshift_v1_route:
          name: dummy
          namespace: "{{ namespace }}"
          state: absent
    tags: always

  - name: delete project quota
    shell: "oc delete limitrange --all -n {{ namespace }}"
    ignore_errors: true
    tags: always

  - import_role:
      name: openshift_sonatype_nexus
    vars:
      project_name: "{{ namespace }}"
      nexus_image_version: 3.12.1
      nexus_max_memory: 6Gi
    tags: nexus

  - import_role:
      name: openshift_gogs
    vars:
      project_name: "{{ namespace }}"
      gogs_route: "gogs-{{ namespace }}.{{ apps_hostname_suffix }}"
      gogs_image_version: 0.11.34
      gogs_admin_user: "{{ infrasvcs_adm_user }}"
      gogs_admin_password: "{{ infrasvcs_adm_pwd }}"
      gogs_user: "{{ gogs_dev_user }}"
      gogs_password: "{{ gogs_pwd }}"
    tags: gogs

  # deploy guides
  - import_role:
      name: openshift_workshopper
      allow_duplicates: true
    vars:
      workshopper_name: guides-codeready
      project_name: "{{ namespace }}"
      workshopper_content_url_prefix: "https://raw.githubusercontent.com/{{ git_repository_guide_path }}/{{ git_repository_guide_reference }}"
      workshopper_workshop_urls: "https://raw.githubusercontent.com/{{ git_repository_guide_path }}/{{ git_repository_guide_reference }}/_cloud-native-workshop-codeready.yml"
      workshopper_env_vars:
        PROJECT_SUFFIX: "{{ project_suffix }}"
        COOLSTORE_PROJECT: coolstore{{ project_suffix }}
        INFRA_PROJECT: infra{{ project_suffix }}
        OPENSHIFT_CONSOLE_URL: "{{ openshift_master_url }}"
        APPS_HOSTNAME_SUFFIX: "{{ apps_hostname_suffix }}"
        LABS_GIT_REPO: https://github.com/{{ git_repository_lab_path }}.git#{{ git_repository_lab_reference }}
        LABS_DOWNLOAD_URL: https://github.com/{{ git_repository_lab_path }}/archive/{{ git_repository_lab_reference }}.zip
        WEB_NODEJS_GIT_REPO: https://github.com/{{ git_repository_lab_path }}/tree/{{ git_repository_lab_reference }}/web-nodejs
        CODEREADY_WORKSPACES_URL: http://codeready-{{ namespace }}.{{ apps_hostname_suffix }}
        GIT_URL: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}
        NEXUS_URL: http://nexus-{{ namespace }}.{{ apps_hostname_suffix }}
        KIALI_URL: https://kiali-infra{{ project_suffix }}.{{ apps_hostname_suffix }}
    tags: guides

  # install openjdk imagestream
  - name: get openjdk image stream
    shell: "oc get is java -n openshift"
    register: java_imagestream_result
    ignore_errors: true
    tags: jdk

  - name: install java image stream
    shell: "oc apply -n openshift -f https://raw.githubusercontent.com/jboss-openshift/application-templates/master/openjdk/openjdk18-image-stream.json"
    when: java_imagestream_result is failed
    tags: jdk

  # install CodeReady Workspaces
  - name: Install Che Plugin Registry
    command: > 
      oc new-app -f https://raw.githubusercontent.com/mcouliba/che-plugin-registry/master/openshift/che-plugin-registry.yml \
      -p IMAGE="quay.io/mcouliba/che-plugin-registry" \
      -p IMAGE_TAG="latest" \
      -p PULL_POLICY="IfNotPresent" \
      -n {{ namespace }}
  - name: get Che Plugin Registry URL
    command: "oc get route che-plugin-registry -o 'jsonpath={.spec.host}' -n {{ namespace }}"
    register: che_plugin_registry_host
  - import_role:
      name: openshift_codeready_workspaces
    vars:
      project_name: "{{ namespace }}"
      codeready_plugin_registry_url: "http://{{ che_plugin_registry_host.stdout }}"
    tags: codeready-workspaces
  
  - name: get CodeReady Workspaces URL
    command: "oc get routes codeready --template={% raw %}'{{ .spec.host }}'{% endraw %} -n {{ namespace }}"
    register: cmd_result
    changed_when: true

  - name: init 'codeready_url' variable
    set_fact:
      codeready_url: "{{ cmd_result.stdout }}"

  - name: get RHSSO URL
    command: "oc get routes keycloak --template={% raw %}'{{ .spec.host }}'{% endraw %} -n {{ namespace }}"
    register: cmd_result
    changed_when: true

  - name: init 'rhsso_url' variable
    set_fact:
      rhsso_url: "{{ cmd_result.stdout }}"

  - name: wait for CodeReady Workspaces to be running
    uri:
      url: "http://{{ codeready_url }}/api/system/state"
      status_code: 200
    register: result
    until: result.status == 200
    retries: 60
    delay: 30

  - name: get auth token from RHSSO CodeReady realm
    uri:
      url: http://{{ rhsso_url }}/auth/realms/codeready/protocol/openid-connect/token
      method: POST
      body: "username=admin&password=admin&grant_type=password&client_id=admin-cli"
      status_code: 200
      headers:
        Content-Type: "application/x-www-form-urlencoded"
    register: codeready_access_token_result

  - name: init 'codeready_access_token_bearer' variable
    set_fact:
      codeready_access_token_bearer: "{{ codeready_access_token_result.json | json_query('access_token') }}"
  
  - name: add the cloud native stack
    uri:
      url: "http://{{ codeready_url }}/api/stack"
      method: POST
      body: "{{ lookup('template','cloud-native-stack.json.j2', convert_data=False) }}"
      status_code: 201
      body_format: json
      headers:
        Authorization: "Bearer {{ codeready_access_token_bearer }}"
    register: stack_json_result

  - name: init 'stack_id' variable
    set_fact:
      stack_id: "{{ stack_json_result.json|json_query('id') }}"

  - name: give all users access to the stack
    uri:
      url: "http://{{ codeready_url }}/api/permissions"
      method: POST
      body: "{{ lookup('template','stack-permissions.json.j2', convert_data=False) }}"
      status_code: 204
      body_format: json
      headers:
        Authorization: "Bearer {{ codeready_access_token_bearer }}"
    vars:
      stack_id: "{{ stack_id }}"

  - name: check if istio-system project exists
    command: "oc get project istio-system"
    register: istio_system_project_result
    ignore_errors: true
    changed_when: false

  # Initialize Projects with permissions for 100 users
  - name: Initialize project with permission
    include: "{{ playbook_dir }}/tasks/create_project.yml"
    vars:
      username: "{{ 'user%d' | format(item) }}"
      project_name: "{{ 'coolstore%d' | format(item) }}"
    loop: "{{ range(1, 100 )|list }}"
    when: 
      - initialize_project_permissions

  # Install Local Kiali for 100 users
  - name: Local Kiali Installation
    block:
      - name: get Jaeger URL
        command: "oc get route jaeger-query -o 'jsonpath={.spec.host}' -n istio-system"
        register: jaeger_host
      - name: init 'jaeger_url' variable
        set_fact:
          jaeger_url: "https://{{ jaeger_host.stdout }}"
      - name: get Grafana URL
        command: "oc get route grafana -o 'jsonpath={.spec.host}' -n istio-system"
        register: grafana_host
      - name: init 'grafana_url' variable
        set_fact:
          grafana_url: "http://{{ grafana_host.stdout }}"
      - name: deploy kiali
        include: "{{ playbook_dir }}/tasks/deploy_kiali.yml"
        vars:
          username: "{{ 'user%d' | format(item) }}"
          infra_project_name: "{{ 'infra%d' | format(item) }}"
          project_name: "{{ 'coolstore%d' | format(item) }}"
        loop: "{{ range(1, 100 )|list }}"
    when: 
      - local_kiali_installation
      - istio_system_project_result is succeeded
